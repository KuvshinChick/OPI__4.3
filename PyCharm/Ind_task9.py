#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
В некой игре-стратегии есть солдаты и герои. У всех есть свойство, содержащее
никальный номер объекта, и свойство, в котором хранится принадлежность команде.
У солдат есть метод "иду за героем", который в качестве аргумента
принимает объект типа "герой". У героев есть метод увеличения собственного
уровня. В основной ветке программы создается по одному герою для каждой команды.
В цикле генерируются объекты-солдаты. Их принадлежность команде определяется
случайно. Солдаты разных команд добавляются в разные списки.
Измеряется длина списков солдат противоборствующих команд и выводится на экран.
У героя, принадлежащего команде с более длинным списком,
увеличивается уровень. Отправьте одного из солдат первого
героя следовать за ним. Выведите на экран идентификационные
номера этих двух юнитов.
"""

import random


class Unit:
    def __init__(self, id, team):
        self.id = id
        self.team = team


class Soldier(Unit):
    def follow(self, hero):
        print(f"Солдат {self.id} идет за героем {hero.id}")


class Hero(Unit):
    def level_up(self):
        print(f"У героя {self.id} уровень повышен!")


if __name__ == '__main__':
    team1 = []  # список для хранения солдат первой команды
    team2 = []  # список для хранения солдат второй команды

    hero1 = Hero(1, 1)  # создаем героя первой команды с номером 1
    hero2 = Hero(2, 2)  # создаем героя второй команды с номером 2

    # генерируем 10 солдат
    for i in range(10):
        id = i + 1
        # определяем случайным образом принадлежность солдата команде
        team = random.choice([1, 2])
        if team == 1:
            # создаем солдата с номером id, принадлежащего первой команде
            soldier = Soldier(id, team)
            # добавляем солдата в список солдат первой команды
            team1.append(soldier)
        else:
            # создаем солдата с номером id, принадлежащего второй команде
            soldier = Soldier(id, team)
            # добавляем солдата в список солдат второй команды
            team2.append(soldier)

    # выводим на экран длину списков солдат противоборствующих команд
    print(f"Длина списка солдат первой команды: {len(team1)}")
    print(f"Длина списка солдат второй команды: {len(team2)}")

    # если список солдат первой команды длиннее, то повышаем уровень героя первой команды,
    # иначе повышаем уровень героя второй команды
    if len(team1) > len(team2):
        hero1.level_up()
    else:
        hero2.level_up()

    # берем первого солдата из списка солдат первой команды
    soldier_to_follow = team1[0]
    # отправляем солдата за героем первой команды
    soldier_to_follow.follow(hero1)

    # выводим на экран идентификационные номера героя и солдата
    print(f"Идентификационный номер героя первой команды: {hero1.id}")
    print(f"Идентификационный номер солдата, который за ним идет: {soldier_to_follow.id}")
